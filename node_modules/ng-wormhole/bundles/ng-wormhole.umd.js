(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-wormhole', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng-wormhole'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} target
     * @param {?} node
     * @return {?}
     */
    function appendReducer(target, node) {
        target.appendChild(node);
        return target;
    }
    var NgWormholeDirective = (function () {
        function NgWormholeDirective(viewContainerRef, templateRef, document) {
            this.viewContainerRef = viewContainerRef;
            this.templateRef = templateRef;
            this.ngWormholeRenderInPlace = false;
            this.initialized = false;
            this.document = document;
        }
        Object.defineProperty(NgWormholeDirective.prototype, "destinationElement", {
            get: /**
             * @return {?}
             */ function () {
                if (this.ngWormholeRenderInPlace) {
                    return (this.viewContainerRef.element &&
                        this.viewContainerRef.element.nativeElement);
                }
                if (!this.ngWormhole) {
                    return null;
                }
                return typeof this.ngWormhole === 'string'
                    ? this.document.querySelector(this.ngWormhole)
                    : this.ngWormhole;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgWormholeDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
            };
        /**
         * @return {?}
         */
        NgWormholeDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.appendToDestination();
                this.initialized = true;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgWormholeDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.initialized) {
                    this.appendToDestination();
                }
            };
        /**
         * @return {?}
         */
        NgWormholeDirective.prototype.appendToDestination = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var startingActiveElement = this.getActiveElement();
                /** @type {?} */
                var destinationElement = this.destinationElement;
                if (destinationElement == null) {
                    return;
                }
                /** @type {?} */
                var content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
                if (destinationElement.nodeType === Node.COMMENT_NODE) {
                    destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
                }
                else {
                    destinationElement.appendChild(content);
                }
                /** @type {?} */
                var resultingActiveElement = this.getActiveElement();
                if (startingActiveElement != null &&
                    resultingActiveElement !== startingActiveElement) {
                    ((startingActiveElement)).focus();
                }
            };
        /**
         * @return {?}
         */
        NgWormholeDirective.prototype.getActiveElement = /**
         * @return {?}
         */
            function () {
                return this.document.activeElement;
            };
        NgWormholeDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngWormhole]'
                    },] },
        ];
        /** @nocollapse */
        NgWormholeDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef },
                { type: core.TemplateRef },
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        NgWormholeDirective.propDecorators = {
            ngWormholeRenderInPlace: [{ type: core.Input }],
            ngWormhole: [{ type: core.Input }]
        };
        return NgWormholeDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var NgWormholeModule = (function () {
        function NgWormholeModule() {
        }
        NgWormholeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [NgWormholeDirective],
                        exports: [NgWormholeDirective]
                    },] },
        ];
        return NgWormholeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.NgWormholeDirective = NgWormholeDirective;
    exports.NgWormholeModule = NgWormholeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd29ybWhvbGUudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZy13b3JtaG9sZS9saWIvbmctd29ybWhvbGUuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZy13b3JtaG9sZS9saWIvbmctd29ybWhvbGUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIFRlbXBsYXRlUmVmLFxuICBFbWJlZGRlZFZpZXdSZWYsXG4gIEFmdGVyVmlld0luaXQsXG4gIE9uSW5pdCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBIb3N0QmluZGluZyxcbiAgSW5qZWN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5mdW5jdGlvbiBhcHBlbmRSZWR1Y2VyPFQgZXh0ZW5kcyBOb2RlPih0YXJnZXQ6IFQsIG5vZGU6IE5vZGUpOiBUIHtcbiAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ1dvcm1ob2xlXSdcbn0pXG5leHBvcnQgY2xhc3MgTmdXb3JtaG9sZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KClcbiAgbmdXb3JtaG9sZVJlbmRlckluUGxhY2UgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBuZ1dvcm1ob2xlOiBzdHJpbmcgfCBFbGVtZW50O1xuXG4gIHByaXZhdGUgZW1iZWRkZWRWaWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8YW55PjtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudDogYW55XG4gICkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgfVxuXG4gIGdldCBkZXN0aW5hdGlvbkVsZW1lbnQoKTogRWxlbWVudCB8IG51bGwge1xuICAgIGlmICh0aGlzLm5nV29ybWhvbGVSZW5kZXJJblBsYWNlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudCAmJlxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5uZ1dvcm1ob2xlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIHRoaXMubmdXb3JtaG9sZSA9PT0gJ3N0cmluZydcbiAgICAgID8gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMubmdXb3JtaG9sZSlcbiAgICAgIDogdGhpcy5uZ1dvcm1ob2xlO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5lbWJlZGRlZFZpZXdSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KFxuICAgICAgdGhpcy50ZW1wbGF0ZVJlZlxuICAgICk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hcHBlbmRUb0Rlc3RpbmF0aW9uKCk7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuYXBwZW5kVG9EZXN0aW5hdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXBwZW5kVG9EZXN0aW5hdGlvbigpOiB2b2lkIHtcbiAgICBsZXQgc3RhcnRpbmdBY3RpdmVFbGVtZW50ID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgbGV0IGRlc3RpbmF0aW9uRWxlbWVudCA9IHRoaXMuZGVzdGluYXRpb25FbGVtZW50O1xuXG4gICAgaWYgKGRlc3RpbmF0aW9uRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLmVtYmVkZGVkVmlld1JlZi5yb290Tm9kZXMucmVkdWNlKFxuICAgICAgYXBwZW5kUmVkdWNlcixcbiAgICAgIHRoaXMuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gICAgKTtcbiAgICBpZiAoZGVzdGluYXRpb25FbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSkge1xuICAgICAgZGVzdGluYXRpb25FbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBkZXN0aW5hdGlvbkVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3RpbmF0aW9uRWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0aW5nQWN0aXZlRWxlbWVudCA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIGlmIChcbiAgICAgIHN0YXJ0aW5nQWN0aXZlRWxlbWVudCAhPSBudWxsICYmXG4gICAgICByZXN1bHRpbmdBY3RpdmVFbGVtZW50ICE9PSBzdGFydGluZ0FjdGl2ZUVsZW1lbnRcbiAgICApIHtcbiAgICAgIChzdGFydGluZ0FjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRBY3RpdmVFbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ1dvcm1ob2xlRGlyZWN0aXZlIH0gZnJvbSAnLi9uZy13b3JtaG9sZS5kaXJlY3RpdmUnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXSxcbiAgZGVjbGFyYXRpb25zOiBbTmdXb3JtaG9sZURpcmVjdGl2ZV0sXG4gIGV4cG9ydHM6IFtOZ1dvcm1ob2xlRGlyZWN0aXZlXVxufSlcbmV4cG9ydCBjbGFzcyBOZ1dvcm1ob2xlTW9kdWxlIHt9XG4iXSwibmFtZXMiOlsiRGlyZWN0aXZlIiwiVmlld0NvbnRhaW5lclJlZiIsIlRlbXBsYXRlUmVmIiwiSW5qZWN0IiwiRE9DVU1FTlQiLCJJbnB1dCIsIk5nTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7OztJQWVBLHVCQUF1QyxNQUFTLEVBQUUsSUFBVTtRQUMxRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXpCLE9BQU8sTUFBTSxDQUFDO0tBQ2Y7O1FBZ0JDLDZCQUNVLGtCQUNBLGFBQ1UsUUFBYTtZQUZ2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCO1lBQ2hCLGdCQUFXLEdBQVgsV0FBVzsyQ0FYSyxLQUFLOytCQU1ULEtBQUs7WUFRekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7U0FDMUI7UUFFRCxzQkFBSSxtREFBa0I7OztnQkFBdEI7Z0JBQ0UsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUU7b0JBQ2hDLFFBQ0UsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU87d0JBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUMzQztpQkFDSDtnQkFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFDcEIsT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBRUQsT0FBTyxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUTtzQkFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztzQkFDNUMsSUFBSSxDQUFDLFVBQVUsQ0FBQzthQUNyQjs7O1dBQUE7Ozs7UUFFRCxzQ0FBUTs7O1lBQVI7Z0JBQ0UsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQzdELElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7YUFDSDs7OztRQUVELDZDQUFlOzs7WUFBZjtnQkFDRSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7YUFDekI7Ozs7O1FBRUQseUNBQVc7Ozs7WUFBWCxVQUFZLE9BQXNCO2dCQUNoQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO2lCQUM1QjthQUNGOzs7O1FBRU8saURBQW1COzs7OztnQkFDekIsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7Z0JBQ3BELElBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO2dCQUVqRCxJQUFJLGtCQUFrQixJQUFJLElBQUksRUFBRTtvQkFDOUIsT0FBTztpQkFDUjs7Z0JBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUNqRCxhQUFhLEVBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUN2QyxDQUFDO2dCQUNGLElBQUksa0JBQWtCLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7b0JBQ3JELGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQ3hDLE9BQU8sRUFDUCxrQkFBa0IsQ0FBQyxXQUFXLENBQy9CLENBQUM7aUJBQ0g7cUJBQU07b0JBQ0wsa0JBQWtCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUN6Qzs7Z0JBRUQsSUFBSSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztnQkFDckQsSUFDRSxxQkFBcUIsSUFBSSxJQUFJO29CQUM3QixzQkFBc0IsS0FBSyxxQkFDN0IsRUFBRTtvQkFDQSxFQUFDLHFCQUFvQyxHQUFFLEtBQUssRUFBRSxDQUFDO2lCQUNoRDs7Ozs7UUFHSyw4Q0FBZ0I7Ozs7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7OztvQkF2RnRDQSxjQUFTLFNBQUM7d0JBQ1QsUUFBUSxFQUFFLGNBQWM7cUJBQ3pCOzs7Ozt3QkFwQkNDLHFCQUFnQjt3QkFDaEJDLGdCQUFXO3dEQWtDUkMsV0FBTSxTQUFDQyxlQUFROzs7OzhDQWJqQkMsVUFBSztpQ0FHTEEsVUFBSzs7a0NBNUJSOzs7Ozs7O0FDQUE7Ozs7b0JBR0NDLGFBQVEsU0FBQzt3QkFDUixPQUFPLEVBQUUsRUFBRTt3QkFDWCxZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQzt3QkFDbkMsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7cUJBQy9COzsrQkFQRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9