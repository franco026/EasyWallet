import { Directive, Input, ViewContainerRef, TemplateRef, Inject, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} target
 * @param {?} node
 * @return {?}
 */
function appendReducer(target, node) {
    target.appendChild(node);
    return target;
}
var NgWormholeDirective = /** @class */ (function () {
    function NgWormholeDirective(viewContainerRef, templateRef, document) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.ngWormholeRenderInPlace = false;
        this.initialized = false;
        this.document = document;
    }
    Object.defineProperty(NgWormholeDirective.prototype, "destinationElement", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngWormholeRenderInPlace) {
                return (this.viewContainerRef.element &&
                    this.viewContainerRef.element.nativeElement);
            }
            if (!this.ngWormhole) {
                return null;
            }
            return typeof this.ngWormhole === 'string'
                ? this.document.querySelector(this.ngWormhole)
                : this.ngWormhole;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.appendToDestination();
        this.initialized = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initialized) {
            this.appendToDestination();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.appendToDestination = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var startingActiveElement = this.getActiveElement();
        /** @type {?} */
        var destinationElement = this.destinationElement;
        if (destinationElement == null) {
            return;
        }
        /** @type {?} */
        var content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
        if (destinationElement.nodeType === Node.COMMENT_NODE) {
            destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
        }
        else {
            destinationElement.appendChild(content);
        }
        /** @type {?} */
        var resultingActiveElement = this.getActiveElement();
        if (startingActiveElement != null &&
            resultingActiveElement !== startingActiveElement) {
            (/** @type {?} */ (startingActiveElement)).focus();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.getActiveElement = /**
     * @return {?}
     */
    function () {
        return this.document.activeElement;
    };
    NgWormholeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngWormhole]'
                },] },
    ];
    /** @nocollapse */
    NgWormholeDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NgWormholeDirective.propDecorators = {
        ngWormholeRenderInPlace: [{ type: Input }],
        ngWormhole: [{ type: Input }]
    };
    return NgWormholeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgWormholeModule = /** @class */ (function () {
    function NgWormholeModule() {
    }
    NgWormholeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgWormholeDirective],
                    exports: [NgWormholeDirective]
                },] },
    ];
    return NgWormholeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgWormholeDirective, NgWormholeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd29ybWhvbGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLXdvcm1ob2xlL2xpYi9uZy13b3JtaG9sZS5kaXJlY3RpdmUudHMiLCJuZzovL25nLXdvcm1ob2xlL2xpYi9uZy13b3JtaG9sZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgVGVtcGxhdGVSZWYsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIEhvc3RCaW5kaW5nLFxuICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmZ1bmN0aW9uIGFwcGVuZFJlZHVjZXI8VCBleHRlbmRzIE5vZGU+KHRhcmdldDogVCwgbm9kZTogTm9kZSk6IFQge1xuICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25nV29ybWhvbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ1dvcm1ob2xlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKVxuICBuZ1dvcm1ob2xlUmVuZGVySW5QbGFjZSA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIG5nV29ybWhvbGU6IHN0cmluZyB8IEVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBlbWJlZGRlZFZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50OiBhbnlcbiAgKSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICB9XG5cbiAgZ2V0IGRlc3RpbmF0aW9uRWxlbWVudCgpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgaWYgKHRoaXMubmdXb3JtaG9sZVJlbmRlckluUGxhY2UpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50ICYmXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5nV29ybWhvbGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdGhpcy5uZ1dvcm1ob2xlID09PSAnc3RyaW5nJ1xuICAgICAgPyB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5uZ1dvcm1ob2xlKVxuICAgICAgOiB0aGlzLm5nV29ybWhvbGU7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmVtYmVkZGVkVmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcoXG4gICAgICB0aGlzLnRlbXBsYXRlUmVmXG4gICAgKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmFwcGVuZFRvRGVzdGluYXRpb24oKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5hcHBlbmRUb0Rlc3RpbmF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhcHBlbmRUb0Rlc3RpbmF0aW9uKCk6IHZvaWQge1xuICAgIGxldCBzdGFydGluZ0FjdGl2ZUVsZW1lbnQgPSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICBsZXQgZGVzdGluYXRpb25FbGVtZW50ID0gdGhpcy5kZXN0aW5hdGlvbkVsZW1lbnQ7XG5cbiAgICBpZiAoZGVzdGluYXRpb25FbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgY29udGVudCA9IHRoaXMuZW1iZWRkZWRWaWV3UmVmLnJvb3ROb2Rlcy5yZWR1Y2UoXG4gICAgICBhcHBlbmRSZWR1Y2VyLFxuICAgICAgdGhpcy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcbiAgICApO1xuICAgIGlmIChkZXN0aW5hdGlvbkVsZW1lbnQubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XG4gICAgICBkZXN0aW5hdGlvbkVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGRlc3RpbmF0aW9uRWxlbWVudC5uZXh0U2libGluZ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVzdGluYXRpb25FbGVtZW50LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIH1cblxuICAgIGxldCByZXN1bHRpbmdBY3RpdmVFbGVtZW50ID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgaWYgKFxuICAgICAgc3RhcnRpbmdBY3RpdmVFbGVtZW50ICE9IG51bGwgJiZcbiAgICAgIHJlc3VsdGluZ0FjdGl2ZUVsZW1lbnQgIT09IHN0YXJ0aW5nQWN0aXZlRWxlbWVudFxuICAgICkge1xuICAgICAgKHN0YXJ0aW5nQWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEFjdGl2ZUVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nV29ybWhvbGVEaXJlY3RpdmUgfSBmcm9tICcuL25nLXdvcm1ob2xlLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ1dvcm1ob2xlRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW05nV29ybWhvbGVEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIE5nV29ybWhvbGVNb2R1bGUge31cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztBQWVBLHVCQUF1QyxNQUFTLEVBQUUsSUFBVTtJQUMxRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpCLE9BQU8sTUFBTSxDQUFDO0NBQ2Y7O0lBZ0JDLDZCQUNVLGtCQUNBLGFBQ1UsUUFBYTtRQUZ2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVzt1Q0FYSyxLQUFLOzJCQU1ULEtBQUs7UUFRekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7S0FDMUI7SUFFRCxzQkFBSSxtREFBa0I7Ozs7UUFBdEI7WUFDRSxJQUFJLElBQUksQ0FBQyx1QkFBdUIsRUFBRTtnQkFDaEMsUUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTztvQkFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQzNDO2FBQ0g7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDcEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUVELE9BQU8sT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVE7a0JBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7a0JBQzVDLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDckI7OztPQUFBOzs7O0lBRUQsc0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQzdELElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7S0FDSDs7OztJQUVELDZDQUFlOzs7SUFBZjtRQUNFLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0tBQ3pCOzs7OztJQUVELHlDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDNUI7S0FDRjs7OztJQUVPLGlEQUFtQjs7Ozs7UUFDekIsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQzs7UUFDcEQsSUFBSSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFFakQsSUFBSSxrQkFBa0IsSUFBSSxJQUFJLEVBQUU7WUFDOUIsT0FBTztTQUNSOztRQUVELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDakQsYUFBYSxFQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsc0JBQXNCLEVBQUUsQ0FDdkMsQ0FBQztRQUNGLElBQUksa0JBQWtCLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckQsa0JBQWtCLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FDeEMsT0FBTyxFQUNQLGtCQUFrQixDQUFDLFdBQVcsQ0FDL0IsQ0FBQztTQUNIO2FBQU07WUFDTCxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDekM7O1FBRUQsSUFBSSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNyRCxJQUNFLHFCQUFxQixJQUFJLElBQUk7WUFDN0Isc0JBQXNCLEtBQUsscUJBQzdCLEVBQUU7WUFDQSxtQkFBQyxxQkFBb0MsR0FBRSxLQUFLLEVBQUUsQ0FBQztTQUNoRDs7Ozs7SUFHSyw4Q0FBZ0I7Ozs7UUFDdEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQzs7O2dCQXZGdEMsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO2lCQUN6Qjs7OztnQkFwQkMsZ0JBQWdCO2dCQUNoQixXQUFXO2dEQWtDUixNQUFNLFNBQUMsUUFBUTs7OzBDQWJqQixLQUFLOzZCQUdMLEtBQUs7OzhCQTVCUjs7Ozs7OztBQ0FBOzs7O2dCQUdDLFFBQVEsU0FBQztvQkFDUixPQUFPLEVBQUUsRUFBRTtvQkFDWCxZQUFZLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQztvQkFDbkMsT0FBTyxFQUFFLENBQUMsbUJBQW1CLENBQUM7aUJBQy9COzsyQkFQRDs7Ozs7Ozs7Ozs7Ozs7OyJ9