import { Directive, Input, ViewContainerRef, TemplateRef, Inject, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} target
 * @param {?} node
 * @return {?}
 */
function appendReducer(target, node) {
    target.appendChild(node);
    return target;
}
class NgWormholeDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} templateRef
     * @param {?} document
     */
    constructor(viewContainerRef, templateRef, document) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.ngWormholeRenderInPlace = false;
        this.initialized = false;
        this.document = document;
    }
    /**
     * @return {?}
     */
    get destinationElement() {
        if (this.ngWormholeRenderInPlace) {
            return (this.viewContainerRef.element &&
                this.viewContainerRef.element.nativeElement);
        }
        if (!this.ngWormhole) {
            return null;
        }
        return typeof this.ngWormhole === 'string'
            ? this.document.querySelector(this.ngWormhole)
            : this.ngWormhole;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.appendToDestination();
        this.initialized = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initialized) {
            this.appendToDestination();
        }
    }
    /**
     * @return {?}
     */
    appendToDestination() {
        /** @type {?} */
        let startingActiveElement = this.getActiveElement();
        /** @type {?} */
        let destinationElement = this.destinationElement;
        if (destinationElement == null) {
            return;
        }
        /** @type {?} */
        let content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
        if (destinationElement.nodeType === Node.COMMENT_NODE) {
            destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
        }
        else {
            destinationElement.appendChild(content);
        }
        /** @type {?} */
        let resultingActiveElement = this.getActiveElement();
        if (startingActiveElement != null &&
            resultingActiveElement !== startingActiveElement) {
            (/** @type {?} */ (startingActiveElement)).focus();
        }
    }
    /**
     * @return {?}
     */
    getActiveElement() {
        return this.document.activeElement;
    }
}
NgWormholeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngWormhole]'
            },] },
];
/** @nocollapse */
NgWormholeDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
NgWormholeDirective.propDecorators = {
    ngWormholeRenderInPlace: [{ type: Input }],
    ngWormhole: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class NgWormholeModule {
}
NgWormholeModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [NgWormholeDirective],
                exports: [NgWormholeDirective]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgWormholeDirective, NgWormholeModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd29ybWhvbGUuanMubWFwIiwic291cmNlcyI6WyJuZzovL25nLXdvcm1ob2xlL2xpYi9uZy13b3JtaG9sZS5kaXJlY3RpdmUudHMiLCJuZzovL25nLXdvcm1ob2xlL2xpYi9uZy13b3JtaG9sZS5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBJbnB1dCxcbiAgVmlld0NvbnRhaW5lclJlZixcbiAgVGVtcGxhdGVSZWYsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgT25Jbml0LFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIEhvc3RCaW5kaW5nLFxuICBJbmplY3Rcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmZ1bmN0aW9uIGFwcGVuZFJlZHVjZXI8VCBleHRlbmRzIE5vZGU+KHRhcmdldDogVCwgbm9kZTogTm9kZSk6IFQge1xuICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25nV29ybWhvbGVdJ1xufSlcbmV4cG9ydCBjbGFzcyBOZ1dvcm1ob2xlRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKVxuICBuZ1dvcm1ob2xlUmVuZGVySW5QbGFjZSA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpXG4gIG5nV29ybWhvbGU6IHN0cmluZyB8IEVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBlbWJlZGRlZFZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBwcml2YXRlIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIHByaXZhdGUgZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50OiBhbnlcbiAgKSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IGRvY3VtZW50O1xuICB9XG5cbiAgZ2V0IGRlc3RpbmF0aW9uRWxlbWVudCgpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgaWYgKHRoaXMubmdXb3JtaG9sZVJlbmRlckluUGxhY2UpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50ICYmXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZi5lbGVtZW50Lm5hdGl2ZUVsZW1lbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm5nV29ybWhvbGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlb2YgdGhpcy5uZ1dvcm1ob2xlID09PSAnc3RyaW5nJ1xuICAgICAgPyB0aGlzLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5uZ1dvcm1ob2xlKVxuICAgICAgOiB0aGlzLm5nV29ybWhvbGU7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmVtYmVkZGVkVmlld1JlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVFbWJlZGRlZFZpZXcoXG4gICAgICB0aGlzLnRlbXBsYXRlUmVmXG4gICAgKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmFwcGVuZFRvRGVzdGluYXRpb24oKTtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5hcHBlbmRUb0Rlc3RpbmF0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhcHBlbmRUb0Rlc3RpbmF0aW9uKCk6IHZvaWQge1xuICAgIGxldCBzdGFydGluZ0FjdGl2ZUVsZW1lbnQgPSB0aGlzLmdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICBsZXQgZGVzdGluYXRpb25FbGVtZW50ID0gdGhpcy5kZXN0aW5hdGlvbkVsZW1lbnQ7XG5cbiAgICBpZiAoZGVzdGluYXRpb25FbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgY29udGVudCA9IHRoaXMuZW1iZWRkZWRWaWV3UmVmLnJvb3ROb2Rlcy5yZWR1Y2UoXG4gICAgICBhcHBlbmRSZWR1Y2VyLFxuICAgICAgdGhpcy5kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KClcbiAgICApO1xuICAgIGlmIChkZXN0aW5hdGlvbkVsZW1lbnQubm9kZVR5cGUgPT09IE5vZGUuQ09NTUVOVF9OT0RFKSB7XG4gICAgICBkZXN0aW5hdGlvbkVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoXG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGRlc3RpbmF0aW9uRWxlbWVudC5uZXh0U2libGluZ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVzdGluYXRpb25FbGVtZW50LmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuICAgIH1cblxuICAgIGxldCByZXN1bHRpbmdBY3RpdmVFbGVtZW50ID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgaWYgKFxuICAgICAgc3RhcnRpbmdBY3RpdmVFbGVtZW50ICE9IG51bGwgJiZcbiAgICAgIHJlc3VsdGluZ0FjdGl2ZUVsZW1lbnQgIT09IHN0YXJ0aW5nQWN0aXZlRWxlbWVudFxuICAgICkge1xuICAgICAgKHN0YXJ0aW5nQWN0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCkuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEFjdGl2ZUVsZW1lbnQoKTogRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nV29ybWhvbGVEaXJlY3RpdmUgfSBmcm9tICcuL25nLXdvcm1ob2xlLmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ1dvcm1ob2xlRGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW05nV29ybWhvbGVEaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIE5nV29ybWhvbGVNb2R1bGUge31cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7OztBQWVBLHVCQUF1QyxNQUFTLEVBQUUsSUFBVTtJQUMxRCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRXpCLE9BQU8sTUFBTSxDQUFDO0NBQ2Y7QUFLRDs7Ozs7O0lBV0UsWUFDVSxrQkFDQSxhQUNVLFFBQWE7UUFGdkIscUJBQWdCLEdBQWhCLGdCQUFnQjtRQUNoQixnQkFBVyxHQUFYLFdBQVc7dUNBWEssS0FBSzsyQkFNVCxLQUFLO1FBUXpCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0tBQzFCOzs7O0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDaEMsUUFDRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTztnQkFDN0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQzNDO1NBQ0g7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsT0FBTyxPQUFPLElBQUksQ0FBQyxVQUFVLEtBQUssUUFBUTtjQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2NBQzVDLElBQUksQ0FBQyxVQUFVLENBQUM7S0FDckI7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsa0JBQWtCLENBQzdELElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7S0FDSDs7OztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztLQUN6Qjs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzVCO0tBQ0Y7Ozs7SUFFTyxtQkFBbUI7O1FBQ3pCLElBQUkscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7O1FBQ3BELElBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBRWpELElBQUksa0JBQWtCLElBQUksSUFBSSxFQUFFO1lBQzlCLE9BQU87U0FDUjs7UUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQ2pELGFBQWEsRUFDYixJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQixFQUFFLENBQ3ZDLENBQUM7UUFDRixJQUFJLGtCQUFrQixDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JELGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQ3hDLE9BQU8sRUFDUCxrQkFBa0IsQ0FBQyxXQUFXLENBQy9CLENBQUM7U0FDSDthQUFNO1lBQ0wsa0JBQWtCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3pDOztRQUVELElBQUksc0JBQXNCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDckQsSUFDRSxxQkFBcUIsSUFBSSxJQUFJO1lBQzdCLHNCQUFzQixLQUFLLHFCQUM3QixFQUFFO1lBQ0EsbUJBQUMscUJBQW9DLEdBQUUsS0FBSyxFQUFFLENBQUM7U0FDaEQ7Ozs7O0lBR0ssZ0JBQWdCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7Ozs7WUF2RnRDLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsY0FBYzthQUN6Qjs7OztZQXBCQyxnQkFBZ0I7WUFDaEIsV0FBVzs0Q0FrQ1IsTUFBTSxTQUFDLFFBQVE7OztzQ0FiakIsS0FBSzt5QkFHTCxLQUFLOzs7Ozs7O0FDNUJSOzs7WUFHQyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLEVBQUU7Z0JBQ1gsWUFBWSxFQUFFLENBQUMsbUJBQW1CLENBQUM7Z0JBQ25DLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixDQUFDO2FBQy9COzs7Ozs7Ozs7Ozs7Ozs7In0=