/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
/**
 * @template T
 * @param {?} target
 * @param {?} node
 * @return {?}
 */
function appendReducer(target, node) {
    target.appendChild(node);
    return target;
}
var NgWormholeDirective = /** @class */ (function () {
    function NgWormholeDirective(viewContainerRef, templateRef, document) {
        this.viewContainerRef = viewContainerRef;
        this.templateRef = templateRef;
        this.ngWormholeRenderInPlace = false;
        this.initialized = false;
        this.document = document;
    }
    Object.defineProperty(NgWormholeDirective.prototype, "destinationElement", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.ngWormholeRenderInPlace) {
                return (this.viewContainerRef.element &&
                    this.viewContainerRef.element.nativeElement);
            }
            if (!this.ngWormhole) {
                return null;
            }
            return typeof this.ngWormhole === 'string'
                ? this.document.querySelector(this.ngWormhole)
                : this.ngWormhole;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.embeddedViewRef = this.viewContainerRef.createEmbeddedView(this.templateRef);
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.appendToDestination();
        this.initialized = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgWormholeDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initialized) {
            this.appendToDestination();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.appendToDestination = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var startingActiveElement = this.getActiveElement();
        /** @type {?} */
        var destinationElement = this.destinationElement;
        if (destinationElement == null) {
            return;
        }
        /** @type {?} */
        var content = this.embeddedViewRef.rootNodes.reduce(appendReducer, this.document.createDocumentFragment());
        if (destinationElement.nodeType === Node.COMMENT_NODE) {
            destinationElement.parentNode.insertBefore(content, destinationElement.nextSibling);
        }
        else {
            destinationElement.appendChild(content);
        }
        /** @type {?} */
        var resultingActiveElement = this.getActiveElement();
        if (startingActiveElement != null &&
            resultingActiveElement !== startingActiveElement) {
            (/** @type {?} */ (startingActiveElement)).focus();
        }
    };
    /**
     * @return {?}
     */
    NgWormholeDirective.prototype.getActiveElement = /**
     * @return {?}
     */
    function () {
        return this.document.activeElement;
    };
    NgWormholeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngWormhole]'
                },] },
    ];
    /** @nocollapse */
    NgWormholeDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    NgWormholeDirective.propDecorators = {
        ngWormholeRenderInPlace: [{ type: Input }],
        ngWormhole: [{ type: Input }]
    };
    return NgWormholeDirective;
}());
export { NgWormholeDirective };
if (false) {
    /** @type {?} */
    NgWormholeDirective.prototype.ngWormholeRenderInPlace;
    /** @type {?} */
    NgWormholeDirective.prototype.ngWormhole;
    /** @type {?} */
    NgWormholeDirective.prototype.embeddedViewRef;
    /** @type {?} */
    NgWormholeDirective.prototype.initialized;
    /** @type {?} */
    NgWormholeDirective.prototype.document;
    /** @type {?} */
    NgWormholeDirective.prototype.viewContainerRef;
    /** @type {?} */
    NgWormholeDirective.prototype.templateRef;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctd29ybWhvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctd29ybWhvbGUvIiwic291cmNlcyI6WyJsaWIvbmctd29ybWhvbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxnQkFBZ0IsRUFDaEIsV0FBVyxFQU9YLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7Ozs7QUFFM0MsdUJBQXVDLE1BQVMsRUFBRSxJQUFVO0lBQzFELE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFekIsTUFBTSxDQUFDLE1BQU0sQ0FBQztDQUNmOztJQWdCQyw2QkFDVSxrQkFDQSxhQUNVLFFBQWE7UUFGdkIscUJBQWdCLEdBQWhCLGdCQUFnQjtRQUNoQixnQkFBVyxHQUFYLFdBQVc7dUNBWEssS0FBSzsyQkFNVCxLQUFLO1FBUXpCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0tBQzFCO0lBRUQsc0JBQUksbURBQWtCOzs7O1FBQXRCO1lBQ0UsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztnQkFDakMsTUFBTSxDQUFDLENBQ0wsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU87b0JBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUM1QyxDQUFDO2FBQ0g7WUFFRCxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDO2FBQ2I7WUFFRCxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsVUFBVSxLQUFLLFFBQVE7Z0JBQ3hDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO2dCQUM5QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztTQUNyQjs7O09BQUE7Ozs7SUFFRCxzQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxrQkFBa0IsQ0FDN0QsSUFBSSxDQUFDLFdBQVcsQ0FDakIsQ0FBQztLQUNIOzs7O0lBRUQsNkNBQWU7OztJQUFmO1FBQ0UsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7S0FDekI7Ozs7O0lBRUQseUNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1NBQzVCO0tBQ0Y7Ozs7SUFFTyxpREFBbUI7Ozs7O1FBQ3pCLElBQUkscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7O1FBQ3BELElBQUksa0JBQWtCLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBRWpELEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDL0IsTUFBTSxDQUFDO1NBQ1I7O1FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUNqRCxhQUFhLEVBQ2IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxDQUN2QyxDQUFDO1FBQ0YsRUFBRSxDQUFDLENBQUMsa0JBQWtCLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1lBQ3RELGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQ3hDLE9BQU8sRUFDUCxrQkFBa0IsQ0FBQyxXQUFXLENBQy9CLENBQUM7U0FDSDtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sa0JBQWtCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3pDOztRQUVELElBQUksc0JBQXNCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDckQsRUFBRSxDQUFDLENBQ0QscUJBQXFCLElBQUksSUFBSTtZQUM3QixzQkFBc0IsS0FBSyxxQkFDN0IsQ0FBQyxDQUFDLENBQUM7WUFDRCxtQkFBQyxxQkFBb0MsRUFBQyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2hEOzs7OztJQUdLLDhDQUFnQjs7OztRQUN0QixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7OztnQkF2RnRDLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztpQkFDekI7Ozs7Z0JBcEJDLGdCQUFnQjtnQkFDaEIsV0FBVztnREFrQ1IsTUFBTSxTQUFDLFFBQVE7OzswQ0FiakIsS0FBSzs2QkFHTCxLQUFLOzs4QkE1QlI7O1NBd0JhLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIFRlbXBsYXRlUmVmLFxuICBFbWJlZGRlZFZpZXdSZWYsXG4gIEFmdGVyVmlld0luaXQsXG4gIE9uSW5pdCxcbiAgT25DaGFuZ2VzLFxuICBTaW1wbGVDaGFuZ2VzLFxuICBIb3N0QmluZGluZyxcbiAgSW5qZWN0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5mdW5jdGlvbiBhcHBlbmRSZWR1Y2VyPFQgZXh0ZW5kcyBOb2RlPih0YXJnZXQ6IFQsIG5vZGU6IE5vZGUpOiBUIHtcbiAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ1dvcm1ob2xlXSdcbn0pXG5leHBvcnQgY2xhc3MgTmdXb3JtaG9sZURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KClcbiAgbmdXb3JtaG9sZVJlbmRlckluUGxhY2UgPSBmYWxzZTtcblxuICBASW5wdXQoKVxuICBuZ1dvcm1ob2xlOiBzdHJpbmcgfCBFbGVtZW50O1xuXG4gIHByaXZhdGUgZW1iZWRkZWRWaWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8YW55PjtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBwcml2YXRlIGRvY3VtZW50OiBEb2N1bWVudDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudDogYW55XG4gICkge1xuICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgfVxuXG4gIGdldCBkZXN0aW5hdGlvbkVsZW1lbnQoKTogRWxlbWVudCB8IG51bGwge1xuICAgIGlmICh0aGlzLm5nV29ybWhvbGVSZW5kZXJJblBsYWNlKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudCAmJlxuICAgICAgICB0aGlzLnZpZXdDb250YWluZXJSZWYuZWxlbWVudC5uYXRpdmVFbGVtZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5uZ1dvcm1ob2xlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZW9mIHRoaXMubmdXb3JtaG9sZSA9PT0gJ3N0cmluZydcbiAgICAgID8gdGhpcy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMubmdXb3JtaG9sZSlcbiAgICAgIDogdGhpcy5uZ1dvcm1ob2xlO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5lbWJlZGRlZFZpZXdSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlRW1iZWRkZWRWaWV3KFxuICAgICAgdGhpcy50ZW1wbGF0ZVJlZlxuICAgICk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hcHBlbmRUb0Rlc3RpbmF0aW9uKCk7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuYXBwZW5kVG9EZXN0aW5hdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXBwZW5kVG9EZXN0aW5hdGlvbigpOiB2b2lkIHtcbiAgICBsZXQgc3RhcnRpbmdBY3RpdmVFbGVtZW50ID0gdGhpcy5nZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgbGV0IGRlc3RpbmF0aW9uRWxlbWVudCA9IHRoaXMuZGVzdGluYXRpb25FbGVtZW50O1xuXG4gICAgaWYgKGRlc3RpbmF0aW9uRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnQgPSB0aGlzLmVtYmVkZGVkVmlld1JlZi5yb290Tm9kZXMucmVkdWNlKFxuICAgICAgYXBwZW5kUmVkdWNlcixcbiAgICAgIHRoaXMuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpXG4gICAgKTtcbiAgICBpZiAoZGVzdGluYXRpb25FbGVtZW50Lm5vZGVUeXBlID09PSBOb2RlLkNPTU1FTlRfTk9ERSkge1xuICAgICAgZGVzdGluYXRpb25FbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBkZXN0aW5hdGlvbkVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3RpbmF0aW9uRWxlbWVudC5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0aW5nQWN0aXZlRWxlbWVudCA9IHRoaXMuZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIGlmIChcbiAgICAgIHN0YXJ0aW5nQWN0aXZlRWxlbWVudCAhPSBudWxsICYmXG4gICAgICByZXN1bHRpbmdBY3RpdmVFbGVtZW50ICE9PSBzdGFydGluZ0FjdGl2ZUVsZW1lbnRcbiAgICApIHtcbiAgICAgIChzdGFydGluZ0FjdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnQpLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXRBY3RpdmVFbGVtZW50KCk6IEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH1cbn1cbiJdfQ==