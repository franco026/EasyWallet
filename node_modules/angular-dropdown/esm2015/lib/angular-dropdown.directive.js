/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Observable, BehaviorSubject, of } from 'rxjs';
import { skip, first, filter } from 'rxjs/operators';
import { Directive, Attribute, Inject, Input, Output, ContentChild, forwardRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { AngularDropdownControlDirective } from './angular-dropdown-control.directive';
import { AngularDropdownContentComponent } from './angular-dropdown-content.component';
import { calculatePosition, calculateInPlacePosition } from './utils';
/**
 * @record
 */
export function AngularDropdownPositionChanges() { }
if (false) {
    /** @type {?} */
    AngularDropdownPositionChanges.prototype.vPosition;
    /** @type {?} */
    AngularDropdownPositionChanges.prototype.hPosition;
}
/** @type {?} */
let id = 1;
/**
 * @return {?}
 */
function generateDropdownId() {
    return id++;
}
/**
 * @record
 */
export function DropdownContentPosition() { }
if (false) {
    /** @type {?} */
    DropdownContentPosition.prototype.hPosition;
    /** @type {?} */
    DropdownContentPosition.prototype.vPosition;
    /** @type {?} */
    DropdownContentPosition.prototype.top;
    /** @type {?} */
    DropdownContentPosition.prototype.left;
    /** @type {?} */
    DropdownContentPosition.prototype.bottom;
    /** @type {?} */
    DropdownContentPosition.prototype.right;
}
/** @type {?} */
const EmptyDropdownContentPosition = Object.freeze({
    vPosition: null,
    hPosition: null,
    top: null,
    left: null,
    bottom: null,
    right: null
});
export class AngularDropdownDirective {
    /**
     * @param {?} document
     * @param {?=} id
     */
    constructor(document, id) {
        this.renderInPlace = false;
        this.control = null;
        this.previousVerticalPosition = null;
        this.previousHorizontalPosition = null;
        this.matchTriggerWidth = false;
        this._isOpen$ = new BehaviorSubject(false);
        this.isOpen$ = this._isOpen$.pipe(skip(1));
        this.position$ = new BehaviorSubject(EmptyDropdownContentPosition);
        this.calculatePosition = calculatePosition;
        this.calculateInPlacePosition = calculateInPlacePosition;
        this.disabled = false;
        this.beforeOpen = null;
        this.beforeClose = null;
        this.verticalPosition = 'auto';
        this.horizontalPosition = 'auto';
        this.onOpen = this.isOpen$.pipe(filter(open => open === true));
        this.onClose = this.isOpen$.pipe(filter(open => open === false));
        this.uniqueId = null;
        this.width = null;
        this.reposition = () => {
            if (!this._isOpen$.getValue()) {
                return null;
            }
            /** @type {?} */
            let dropdownElement = this.dropdownElement;
            if (!dropdownElement || !this.triggerElement) {
                return null;
            }
            /** @type {?} */
            let calculatePosition = this.renderInPlace
                ? this.calculateInPlacePosition
                : this.calculatePosition;
            /** @type {?} */
            let options = {
                horizontalPosition: this.horizontalPosition,
                verticalPosition: this.verticalPosition,
                matchTriggerWidth: this.matchTriggerWidth,
                previousHorizontalPosition: this.previousHorizontalPosition,
                previousVerticalPosition: this.previousVerticalPosition
            };
            /** @type {?} */
            let positionData = calculatePosition(this.triggerElement, dropdownElement, options);
            return this.applyReposition(this.triggerElement, dropdownElement, positionData);
        };
        this.document = document;
        this.initializeId(id);
        this.createDefaultWormholeOutlet();
    }
    /**
     * @return {?}
     */
    get dropdownId() {
        return `ng-dropdown-content-${this.uniqueId}`;
    }
    /**
     * @return {?}
     */
    get triggerElement() {
        return (/** @type {?} */ (this.control)).element.nativeElement;
    }
    /**
     * @return {?}
     */
    get dropdownElement() {
        return (/** @type {?} */ (this.document.getElementById(this.dropdownId)));
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    ngOnChanges({ disabled }) {
        if (disabled &&
            disabled.firstChange === false &&
            disabled.currentValue === true &&
            disabled.previousValue !== true) {
            this.disable();
        }
    }
    /**
     * @return {?}
     */
    open() {
        if (this.disabled || this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        let open$ = of(true);
        if (this.beforeOpen) {
            /** @type {?} */
            const result = this.beforeOpen();
            open$ = result instanceof Observable ? result : of(result);
        }
        open$
            .pipe(first(), filter(open => open === true))
            .subscribe(() => this._isOpen$.next(true));
    }
    /**
     * @param {?=} skipFocus
     * @return {?}
     */
    close(skipFocus = false) {
        if (this.disabled || !this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        let close$ = of(true);
        if (this.beforeClose) {
            /** @type {?} */
            const result = this.beforeClose();
            close$ = result instanceof Observable ? result : of(result);
        }
        close$
            .pipe(first(), filter(close => close === true))
            .subscribe(() => {
            Object.assign(this, {
                hPosition: null,
                vPosition: null,
                top: null,
                right: null,
                bottom: null,
                left: null,
                width: null,
                previousVerticalPosition: null,
                previousHorizontalPosition: null
            });
            this._isOpen$.next(false);
            if (!skipFocus) {
                if (this.triggerElement instanceof HTMLElement &&
                    this.triggerElement.tabIndex > -1) {
                    this.triggerElement.focus();
                }
            }
        });
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this._isOpen$.getValue()) {
            this.close();
        }
        else {
            this.open();
        }
    }
    /**
     * @return {?}
     */
    disable() {
        this.disabled = true;
        this.close();
    }
    /**
     * @return {?}
     */
    enable() {
        this.disabled = false;
    }
    /**
     * @param {?} trigger
     * @param {?} dropdown
     * @param {?} positions
     * @return {?}
     */
    applyReposition(trigger, dropdown, positions) {
        /** @type {?} */
        let changes = {
            hPosition: positions.horizontalPosition,
            vPosition: positions.verticalPosition
        };
        if (positions.style) {
            changes.top = `${positions.style.top}px`;
            // The component can be aligned from the right or from the left, but not from both.
            if (positions.style.left != null) {
                changes.left = `${positions.style.left}px`;
                changes.right = null;
            }
            else if (positions.style.right != null) {
                changes.right = `${positions.style.right}px`;
                changes.left = null;
            }
            if (positions.style.width != null) {
                changes.width = `${positions.style.width}px`;
            }
            if (this.position$.getValue().top == null) {
                // Bypass on the first reposition only to avoid flickering.
                Object.keys(positions.style).forEach(k => (dropdown.style[(/** @type {?} */ (k))] = positions.style[k]));
            }
        }
        this.position$.next(changes);
        this.previousHorizontalPosition = positions.horizontalPosition;
        this.previousVerticalPosition = positions.verticalPosition;
        return changes;
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    initializeId(id) {
        if (id) {
            this.id = this.uniqueId = id;
        }
        else {
            this.uniqueId = generateDropdownId();
            this.id = `ng-dropdown-${this.uniqueId}`;
        }
    }
    /**
     * @return {?}
     */
    createDefaultWormholeOutlet() {
        if (!this.document.getElementById('ng-dropdown-outlet')) {
            /** @type {?} */
            let outlet = this.document.createElement('div');
            outlet.id = 'ng-dropdown-outlet';
            this.document.body.insertBefore(outlet, this.document.body.firstChild);
        }
    }
}
AngularDropdownDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ng-dropdown,[ngDropdown],[ng-dropdown]',
                host: {
                    '[class.render-in-place]': 'renderInPlace',
                    '[class.ng-dropdown]': 'true'
                }
            },] }
];
AngularDropdownDirective.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Attribute, args: ['id',] }] }
];
AngularDropdownDirective.propDecorators = {
    renderInPlace: [{ type: Input }],
    control: [{ type: ContentChild, args: [AngularDropdownControlDirective,] }],
    calculatePosition: [{ type: Input }],
    calculateInPlacePosition: [{ type: Input }],
    disabled: [{ type: Input }],
    beforeOpen: [{ type: Input }],
    beforeClose: [{ type: Input }],
    verticalPosition: [{ type: Input }],
    horizontalPosition: [{ type: Input }],
    onOpen: [{ type: Output, args: ['open',] }],
    onClose: [{ type: Output, args: ['close',] }],
    dropdownContent: [{ type: ContentChild, args: [forwardRef(() => AngularDropdownContentComponent),] }]
};
if (false) {
    /** @type {?} */
    AngularDropdownDirective.prototype.id;
    /** @type {?} */
    AngularDropdownDirective.prototype.renderInPlace;
    /** @type {?} */
    AngularDropdownDirective.prototype.control;
    /** @type {?} */
    AngularDropdownDirective.prototype.previousVerticalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.previousHorizontalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.matchTriggerWidth;
    /** @type {?} */
    AngularDropdownDirective.prototype._isOpen$;
    /** @type {?} */
    AngularDropdownDirective.prototype.isOpen$;
    /** @type {?} */
    AngularDropdownDirective.prototype.position$;
    /** @type {?} */
    AngularDropdownDirective.prototype.calculatePosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.calculateInPlacePosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.disabled;
    /** @type {?} */
    AngularDropdownDirective.prototype.beforeOpen;
    /** @type {?} */
    AngularDropdownDirective.prototype.beforeClose;
    /** @type {?} */
    AngularDropdownDirective.prototype.verticalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.horizontalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.onOpen;
    /** @type {?} */
    AngularDropdownDirective.prototype.onClose;
    /** @type {?} */
    AngularDropdownDirective.prototype.dropdownContent;
    /** @type {?} */
    AngularDropdownDirective.prototype.uniqueId;
    /** @type {?} */
    AngularDropdownDirective.prototype.width;
    /** @type {?} */
    AngularDropdownDirective.prototype.document;
    /** @type {?} */
    AngularDropdownDirective.prototype.reposition;
}
//# sourceMappingURL=data:application/json;base64,