/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Observable, BehaviorSubject, of } from 'rxjs';
import { skip, first, filter } from 'rxjs/operators';
import { Directive, Attribute, Inject, Input, Output, ContentChild, forwardRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { AngularDropdownControlDirective } from './angular-dropdown-control.directive';
import { AngularDropdownContentComponent } from './angular-dropdown-content.component';
import { calculatePosition, calculateInPlacePosition } from './utils';
/**
 * @record
 */
export function AngularDropdownPositionChanges() { }
if (false) {
    /** @type {?} */
    AngularDropdownPositionChanges.prototype.vPosition;
    /** @type {?} */
    AngularDropdownPositionChanges.prototype.hPosition;
}
/** @type {?} */
var id = 1;
/**
 * @return {?}
 */
function generateDropdownId() {
    return id++;
}
/**
 * @record
 */
export function DropdownContentPosition() { }
if (false) {
    /** @type {?} */
    DropdownContentPosition.prototype.hPosition;
    /** @type {?} */
    DropdownContentPosition.prototype.vPosition;
    /** @type {?} */
    DropdownContentPosition.prototype.top;
    /** @type {?} */
    DropdownContentPosition.prototype.left;
    /** @type {?} */
    DropdownContentPosition.prototype.bottom;
    /** @type {?} */
    DropdownContentPosition.prototype.right;
}
/** @type {?} */
var EmptyDropdownContentPosition = Object.freeze({
    vPosition: null,
    hPosition: null,
    top: null,
    left: null,
    bottom: null,
    right: null
});
var AngularDropdownDirective = /** @class */ (function () {
    function AngularDropdownDirective(document, id) {
        var _this = this;
        this.renderInPlace = false;
        this.control = null;
        this.previousVerticalPosition = null;
        this.previousHorizontalPosition = null;
        this.matchTriggerWidth = false;
        this._isOpen$ = new BehaviorSubject(false);
        this.isOpen$ = this._isOpen$.pipe(skip(1));
        this.position$ = new BehaviorSubject(EmptyDropdownContentPosition);
        this.calculatePosition = calculatePosition;
        this.calculateInPlacePosition = calculateInPlacePosition;
        this.disabled = false;
        this.beforeOpen = null;
        this.beforeClose = null;
        this.verticalPosition = 'auto';
        this.horizontalPosition = 'auto';
        this.onOpen = this.isOpen$.pipe(filter(function (open) { return open === true; }));
        this.onClose = this.isOpen$.pipe(filter(function (open) { return open === false; }));
        this.uniqueId = null;
        this.width = null;
        this.reposition = function () {
            if (!_this._isOpen$.getValue()) {
                return null;
            }
            /** @type {?} */
            var dropdownElement = _this.dropdownElement;
            if (!dropdownElement || !_this.triggerElement) {
                return null;
            }
            /** @type {?} */
            var calculatePosition = _this.renderInPlace
                ? _this.calculateInPlacePosition
                : _this.calculatePosition;
            /** @type {?} */
            var options = {
                horizontalPosition: _this.horizontalPosition,
                verticalPosition: _this.verticalPosition,
                matchTriggerWidth: _this.matchTriggerWidth,
                previousHorizontalPosition: _this.previousHorizontalPosition,
                previousVerticalPosition: _this.previousVerticalPosition
            };
            /** @type {?} */
            var positionData = calculatePosition(_this.triggerElement, dropdownElement, options);
            return _this.applyReposition(_this.triggerElement, dropdownElement, positionData);
        };
        this.document = document;
        this.initializeId(id);
        this.createDefaultWormholeOutlet();
    }
    Object.defineProperty(AngularDropdownDirective.prototype, "dropdownId", {
        get: /**
         * @return {?}
         */
        function () {
            return "ng-dropdown-content-" + this.uniqueId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularDropdownDirective.prototype, "triggerElement", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this.control)).element.nativeElement;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularDropdownDirective.prototype, "dropdownElement", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this.document.getElementById(this.dropdownId)));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} __0
     * @return {?}
     */
    AngularDropdownDirective.prototype.ngOnChanges = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var disabled = _a.disabled;
        if (disabled &&
            disabled.firstChange === false &&
            disabled.currentValue === true &&
            disabled.previousValue !== true) {
            this.disable();
        }
    };
    /**
     * @return {?}
     */
    AngularDropdownDirective.prototype.open = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled || this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        var open$ = of(true);
        if (this.beforeOpen) {
            /** @type {?} */
            var result = this.beforeOpen();
            open$ = result instanceof Observable ? result : of(result);
        }
        open$
            .pipe(first(), filter(function (open) { return open === true; }))
            .subscribe(function () { return _this._isOpen$.next(true); });
    };
    /**
     * @param {?=} skipFocus
     * @return {?}
     */
    AngularDropdownDirective.prototype.close = /**
     * @param {?=} skipFocus
     * @return {?}
     */
    function (skipFocus) {
        var _this = this;
        if (skipFocus === void 0) { skipFocus = false; }
        if (this.disabled || !this._isOpen$.getValue()) {
            return;
        }
        /** @type {?} */
        var close$ = of(true);
        if (this.beforeClose) {
            /** @type {?} */
            var result = this.beforeClose();
            close$ = result instanceof Observable ? result : of(result);
        }
        close$
            .pipe(first(), filter(function (close) { return close === true; }))
            .subscribe(function () {
            Object.assign(_this, {
                hPosition: null,
                vPosition: null,
                top: null,
                right: null,
                bottom: null,
                left: null,
                width: null,
                previousVerticalPosition: null,
                previousHorizontalPosition: null
            });
            _this._isOpen$.next(false);
            if (!skipFocus) {
                if (_this.triggerElement instanceof HTMLElement &&
                    _this.triggerElement.tabIndex > -1) {
                    _this.triggerElement.focus();
                }
            }
        });
    };
    /**
     * @return {?}
     */
    AngularDropdownDirective.prototype.toggle = /**
     * @return {?}
     */
    function () {
        if (this._isOpen$.getValue()) {
            this.close();
        }
        else {
            this.open();
        }
    };
    /**
     * @return {?}
     */
    AngularDropdownDirective.prototype.disable = /**
     * @return {?}
     */
    function () {
        this.disabled = true;
        this.close();
    };
    /**
     * @return {?}
     */
    AngularDropdownDirective.prototype.enable = /**
     * @return {?}
     */
    function () {
        this.disabled = false;
    };
    /**
     * @param {?} trigger
     * @param {?} dropdown
     * @param {?} positions
     * @return {?}
     */
    AngularDropdownDirective.prototype.applyReposition = /**
     * @param {?} trigger
     * @param {?} dropdown
     * @param {?} positions
     * @return {?}
     */
    function (trigger, dropdown, positions) {
        /** @type {?} */
        var changes = {
            hPosition: positions.horizontalPosition,
            vPosition: positions.verticalPosition
        };
        if (positions.style) {
            changes.top = positions.style.top + "px";
            // The component can be aligned from the right or from the left, but not from both.
            if (positions.style.left != null) {
                changes.left = positions.style.left + "px";
                changes.right = null;
            }
            else if (positions.style.right != null) {
                changes.right = positions.style.right + "px";
                changes.left = null;
            }
            if (positions.style.width != null) {
                changes.width = positions.style.width + "px";
            }
            if (this.position$.getValue().top == null) {
                // Bypass on the first reposition only to avoid flickering.
                Object.keys(positions.style).forEach(function (k) { return (dropdown.style[(/** @type {?} */ (k))] = positions.style[k]); });
            }
        }
        this.position$.next(changes);
        this.previousHorizontalPosition = positions.horizontalPosition;
        this.previousVerticalPosition = positions.verticalPosition;
        return changes;
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    AngularDropdownDirective.prototype.initializeId = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id) {
            this.id = this.uniqueId = id;
        }
        else {
            this.uniqueId = generateDropdownId();
            this.id = "ng-dropdown-" + this.uniqueId;
        }
    };
    /**
     * @return {?}
     */
    AngularDropdownDirective.prototype.createDefaultWormholeOutlet = /**
     * @return {?}
     */
    function () {
        if (!this.document.getElementById('ng-dropdown-outlet')) {
            /** @type {?} */
            var outlet = this.document.createElement('div');
            outlet.id = 'ng-dropdown-outlet';
            this.document.body.insertBefore(outlet, this.document.body.firstChild);
        }
    };
    AngularDropdownDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ng-dropdown,[ngDropdown],[ng-dropdown]',
                    host: {
                        '[class.render-in-place]': 'renderInPlace',
                        '[class.ng-dropdown]': 'true'
                    }
                },] }
    ];
    AngularDropdownDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: String, decorators: [{ type: Attribute, args: ['id',] }] }
    ]; };
    AngularDropdownDirective.propDecorators = {
        renderInPlace: [{ type: Input }],
        control: [{ type: ContentChild, args: [AngularDropdownControlDirective,] }],
        calculatePosition: [{ type: Input }],
        calculateInPlacePosition: [{ type: Input }],
        disabled: [{ type: Input }],
        beforeOpen: [{ type: Input }],
        beforeClose: [{ type: Input }],
        verticalPosition: [{ type: Input }],
        horizontalPosition: [{ type: Input }],
        onOpen: [{ type: Output, args: ['open',] }],
        onClose: [{ type: Output, args: ['close',] }],
        dropdownContent: [{ type: ContentChild, args: [forwardRef(function () { return AngularDropdownContentComponent; }),] }]
    };
    return AngularDropdownDirective;
}());
export { AngularDropdownDirective };
if (false) {
    /** @type {?} */
    AngularDropdownDirective.prototype.id;
    /** @type {?} */
    AngularDropdownDirective.prototype.renderInPlace;
    /** @type {?} */
    AngularDropdownDirective.prototype.control;
    /** @type {?} */
    AngularDropdownDirective.prototype.previousVerticalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.previousHorizontalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.matchTriggerWidth;
    /** @type {?} */
    AngularDropdownDirective.prototype._isOpen$;
    /** @type {?} */
    AngularDropdownDirective.prototype.isOpen$;
    /** @type {?} */
    AngularDropdownDirective.prototype.position$;
    /** @type {?} */
    AngularDropdownDirective.prototype.calculatePosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.calculateInPlacePosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.disabled;
    /** @type {?} */
    AngularDropdownDirective.prototype.beforeOpen;
    /** @type {?} */
    AngularDropdownDirective.prototype.beforeClose;
    /** @type {?} */
    AngularDropdownDirective.prototype.verticalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.horizontalPosition;
    /** @type {?} */
    AngularDropdownDirective.prototype.onOpen;
    /** @type {?} */
    AngularDropdownDirective.prototype.onClose;
    /** @type {?} */
    AngularDropdownDirective.prototype.dropdownContent;
    /** @type {?} */
    AngularDropdownDirective.prototype.uniqueId;
    /** @type {?} */
    AngularDropdownDirective.prototype.width;
    /** @type {?} */
    AngularDropdownDirective.prototype.document;
    /** @type {?} */
    AngularDropdownDirective.prototype.reposition;
}
//# sourceMappingURL=data:application/json;base64,