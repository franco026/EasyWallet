/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject, forwardRef, Host, HostListener } from '@angular/core';
import { AngularDropdownDirective } from './angular-dropdown.directive';
var AngularDropdownControlDirective = /** @class */ (function () {
    function AngularDropdownControlDirective(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    AngularDropdownControlDirective.prototype.onClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.stopPropagation();
        if (!this.dropdown.disabled) {
            this.dropdown.toggle();
        }
    };
    AngularDropdownControlDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ng-dropdown-control],[ngDropdownControl]',
                    host: {
                        '[attr.aria-haspopup]': 'true',
                        '[attr.aria-controls]': 'dropdown.id',
                        '[attr.aria-expanded]': 'dropdown.isOpen',
                        '[class.ng-dropdown-control]': 'true',
                        '[class.active]': 'dropdown.isOpen'
                    }
                },] }
    ];
    AngularDropdownControlDirective.ctorParameters = function () { return [
        { type: AngularDropdownDirective, decorators: [{ type: Host }, { type: Inject, args: [forwardRef(function () { return AngularDropdownDirective; }),] }] },
        { type: ElementRef }
    ]; };
    AngularDropdownControlDirective.propDecorators = {
        onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return AngularDropdownControlDirective;
}());
export { AngularDropdownControlDirective };
if (false) {
    /** @type {?} */
    AngularDropdownControlDirective.prototype.dropdown;
    /** @type {?} */
    AngularDropdownControlDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1kcm9wZG93bi1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZHJvcGRvd24vIiwic291cmNlcyI6WyJsaWIvYW5ndWxhci1kcm9wZG93bi1jb250cm9sLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLFVBQVUsRUFFVixJQUFJLEVBQ0osWUFBWSxFQUNiLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUM1Qiw4QkFBOEIsQ0FBQztBQUV0QztJQW9CRSx5Q0FHVyxRQUFrQyxFQUNsQyxPQUFtQjtRQURuQixhQUFRLEdBQVIsUUFBUSxDQUEwQjtRQUNsQyxZQUFPLEdBQVAsT0FBTyxDQUFZO0lBQzlCLENBQUM7Ozs7O0lBYkQsaURBQU87Ozs7SUFEUCxVQUNRLENBQVE7UUFDZCxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7UUFFcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDeEI7SUFDSCxDQUFDOztnQkFsQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSwyQ0FBMkM7b0JBQ3JELElBQUksRUFBRTt3QkFDSixzQkFBc0IsRUFBRSxNQUFNO3dCQUM5QixzQkFBc0IsRUFBRSxhQUFhO3dCQUNyQyxzQkFBc0IsRUFBRSxpQkFBaUI7d0JBQ3pDLDZCQUE2QixFQUFFLE1BQU07d0JBQ3JDLGdCQUFnQixFQUFFLGlCQUFpQjtxQkFDcEM7aUJBQ0Y7OztnQkFaUSx3QkFBd0IsdUJBd0IxQixJQUFJLFlBQ0osTUFBTSxTQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsd0JBQXdCLEVBQXhCLENBQXdCLENBQUM7Z0JBakN0RCxVQUFVOzs7MEJBc0JULFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBRSxRQUFRLENBQUU7O0lBZXJDLHNDQUFDO0NBQUEsQUExQkQsSUEwQkM7U0FoQlksK0JBQStCOzs7SUFXdEMsbURBRXlDOztJQUN6QyxrREFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEluamVjdCxcbiAgZm9yd2FyZFJlZixcbiAgSW5wdXQsXG4gIEhvc3QsXG4gIEhvc3RMaXN0ZW5lclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQW5ndWxhckRyb3Bkb3duRGlyZWN0aXZlIH1cbiAgZnJvbSAnLi9hbmd1bGFyLWRyb3Bkb3duLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZy1kcm9wZG93bi1jb250cm9sXSxbbmdEcm9wZG93bkNvbnRyb2xdJyxcbiAgaG9zdDoge1xuICAgICdbYXR0ci5hcmlhLWhhc3BvcHVwXSc6ICd0cnVlJyxcbiAgICAnW2F0dHIuYXJpYS1jb250cm9sc10nOiAnZHJvcGRvd24uaWQnLFxuICAgICdbYXR0ci5hcmlhLWV4cGFuZGVkXSc6ICdkcm9wZG93bi5pc09wZW4nLFxuICAgICdbY2xhc3MubmctZHJvcGRvd24tY29udHJvbF0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5hY3RpdmVdJzogJ2Ryb3Bkb3duLmlzT3BlbidcbiAgfVxufSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFyRHJvcGRvd25Db250cm9sRGlyZWN0aXZlIHtcbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbICckZXZlbnQnIF0pXG4gIG9uQ2xpY2soZTogRXZlbnQpOiB2b2lkIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKCF0aGlzLmRyb3Bkb3duLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmRyb3Bkb3duLnRvZ2dsZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgQEhvc3QoKVxuICAgICAgQEluamVjdChmb3J3YXJkUmVmKCgpID0+IEFuZ3VsYXJEcm9wZG93bkRpcmVjdGl2ZSkpXG4gICAgICBwdWJsaWMgZHJvcGRvd246IEFuZ3VsYXJEcm9wZG93bkRpcmVjdGl2ZSxcbiAgICAgIHB1YmxpYyBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gIH1cbn1cbiJdfQ==