(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('ng-wormhole')) :
    typeof define === 'function' && define.amd ? define('angular-dropdown', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common', 'ng-wormhole'], factory) :
    (factory((global['angular-dropdown'] = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common,global.ngWormhole));
}(this, (function (exports,core,rxjs,operators,common,ngWormhole) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AngularDropdownControlDirective = /** @class */ (function () {
        function AngularDropdownControlDirective(dropdown, element) {
            this.dropdown = dropdown;
            this.element = element;
        }
        /**
         * @param {?} e
         * @return {?}
         */
        AngularDropdownControlDirective.prototype.onClick = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                e.stopPropagation();
                if (!this.dropdown.disabled) {
                    this.dropdown.toggle();
                }
            };
        AngularDropdownControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ng-dropdown-control],[ngDropdownControl]',
                        host: {
                            '[attr.aria-haspopup]': 'true',
                            '[attr.aria-controls]': 'dropdown.id',
                            '[attr.aria-expanded]': 'dropdown.isOpen',
                            '[class.ng-dropdown-control]': 'true',
                            '[class.active]': 'dropdown.isOpen'
                        }
                    },] }
        ];
        AngularDropdownControlDirective.ctorParameters = function () {
            return [
                { type: AngularDropdownDirective, decorators: [{ type: core.Host }, { type: core.Inject, args: [core.forwardRef(function () { return AngularDropdownDirective; }),] }] },
                { type: core.ElementRef }
            ];
        };
        AngularDropdownControlDirective.propDecorators = {
            onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return AngularDropdownControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} element
     * @param {?} callback
     * @return {?}
     */
    function waitForAnimation(element, callback) {
        requestAnimationFrame(function () {
            /** @type {?} */
            var computedStyle = window.getComputedStyle(element);
            if (computedStyle.animationName !== 'none' &&
                computedStyle.animationPlayState === 'running') {
                return once(element, 'animationend', callback);
            }
            callback();
        });
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} listener
     * @return {?}
     */
    function once(element, eventName, listener) {
        element.addEventListener(eventName, function listenOnce(e) {
            element.removeEventListener(eventName, listenOnce);
            return listener(e);
        });
    }
    /** @type {?} */
    var closest = (( /** @type {?} */(window))).Element && Element.prototype.closest ?
        function (el, s) { return el.closest(s); } :
        function closest(self, s) {
            /** @type {?} */
            var matches = ((( /** @type {?} */(self))).document || self.ownerDocument).querySelectorAll(s);
            /** @type {?} */
            var i;
            /** @type {?} */
            var el = self;
            do {
                i = matches.length;
                while (--i >= 0 && matches.item(i) !== el) { }
            } while ((i < 0) && (el = ( /** @type {?} */(el.parentElement))));
            return el;
        };
    /**
     * @param {?} trigger
     * @param {?} dropdown
     * @param {?} __2
     * @return {?}
     */
    function calculatePosition(trigger, dropdown, _a) {
        var horizontalPosition = _a.horizontalPosition, verticalPosition = _a.verticalPosition, matchTriggerWidth = _a.matchTriggerWidth, previousHorizontalPosition = _a.previousHorizontalPosition, previousVerticalPosition = _a.previousVerticalPosition;
        // Collect information about all the involved DOM elements
        /** @type {?} */
        var scroll = { left: window.pageXOffset, top: window.pageYOffset };
        var _b = trigger.getBoundingClientRect(), triggerLeft = _b.left, triggerTop = _b.top, triggerWidth = _b.width, triggerHeight = _b.height;
        var _c = dropdown.getBoundingClientRect(), dropdownHeight = _c.height, dropdownWidth = _c.width;
        /** @type {?} */
        var viewportWidth = window.innerWidth;
        /** @type {?} */
        var style = {};
        // Calculate drop down width
        dropdownWidth = matchTriggerWidth ? triggerWidth : dropdownWidth;
        if (matchTriggerWidth) {
            style.width = dropdownWidth;
        }
        // Calculate horizontal position
        /** @type {?} */
        var triggerLeftWithScroll = triggerLeft + scroll.left;
        if (horizontalPosition === 'auto') {
            // Calculate the number of visible horizontal pixels if we were to place the
            // dropdown on the left and right
            /** @type {?} */
            var leftVisible = Math.min(viewportWidth, triggerLeft + dropdownWidth) - Math.max(0, triggerLeft);
            /** @type {?} */
            var rightVisible = Math.min(viewportWidth, triggerLeft + triggerWidth) - Math.max(0, triggerLeft + triggerWidth - dropdownWidth);
            if (dropdownWidth > leftVisible && rightVisible > leftVisible) {
                // If the drop down won't fit left-aligned, and there is more space on the
                // right than on the left, then force right-aligned
                horizontalPosition = 'right';
            }
            else if (dropdownWidth > rightVisible && leftVisible > rightVisible) {
                // If the drop down won't fit right-aligned, and there is more space on
                // the left than on the right, then force left-aligned
                horizontalPosition = 'left';
            }
            else {
                // Keep same position as previous
                horizontalPosition = previousHorizontalPosition || 'left';
            }
        }
        if (horizontalPosition === 'right') {
            style.right = viewportWidth - (triggerLeftWithScroll + triggerWidth);
        }
        else if (horizontalPosition === 'center') {
            style.left = triggerLeftWithScroll + (triggerWidth - dropdownWidth) / 2;
        }
        else {
            style.left = triggerLeftWithScroll;
        }
        // Calculate vertical position
        /** @type {?} */
        var triggerTopWithScroll = triggerTop + scroll.top;
        if (verticalPosition === 'above') {
            style.top = triggerTopWithScroll - dropdownHeight;
        }
        else if (verticalPosition === 'below') {
            style.top = triggerTopWithScroll + triggerHeight;
        }
        else {
            /** @type {?} */
            var viewportBottom = scroll.top + self.window.innerHeight;
            /** @type {?} */
            var enoughRoomBelow = triggerTopWithScroll + triggerHeight + dropdownHeight < viewportBottom;
            /** @type {?} */
            var enoughRoomAbove = triggerTop > dropdownHeight;
            if (previousVerticalPosition === 'below' && !enoughRoomBelow && enoughRoomAbove) {
                verticalPosition = 'above';
            }
            else if (previousVerticalPosition === 'above' && !enoughRoomAbove && enoughRoomBelow) {
                verticalPosition = 'below';
            }
            else if (!previousVerticalPosition) {
                verticalPosition = enoughRoomBelow ? 'below' : 'above';
            }
            else {
                verticalPosition = previousVerticalPosition;
            }
            style.top = triggerTopWithScroll + (verticalPosition === 'below' ? triggerHeight : -dropdownHeight);
        }
        return { horizontalPosition: horizontalPosition, verticalPosition: verticalPosition, style: style };
    }
    /**
     * @param {?} trigger
     * @param {?} dropdown
     * @param {?} __2
     * @return {?}
     */
    function calculateInPlacePosition(trigger, dropdown, _a) {
        var horizontalPosition = _a.horizontalPosition, verticalPosition = _a.verticalPosition;
        /** @type {?} */
        var dropdownRect;
        /** @type {?} */
        var positionData = {};
        if (horizontalPosition === 'auto') {
            /** @type {?} */
            var triggerRect = trigger.getBoundingClientRect();
            dropdownRect = dropdown.getBoundingClientRect();
            /** @type {?} */
            var viewportRight = window.pageXOffset + window.innerWidth;
            positionData.horizontalPosition = triggerRect.left + dropdownRect.width > viewportRight ? 'right' : 'left';
        }
        if (verticalPosition === 'above') {
            positionData.verticalPosition = verticalPosition;
            dropdownRect = dropdownRect || dropdown.getBoundingClientRect();
            positionData.style = { top: -dropdownRect.height };
        }
        return positionData;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var id = 1;
    /**
     * @return {?}
     */
    function generateDropdownId() {
        return id++;
    }
    /** @type {?} */
    var EmptyDropdownContentPosition = Object.freeze({
        vPosition: null,
        hPosition: null,
        top: null,
        left: null,
        bottom: null,
        right: null
    });
    var AngularDropdownDirective = /** @class */ (function () {
        function AngularDropdownDirective(document, id) {
            var _this = this;
            this.renderInPlace = false;
            this.control = null;
            this.previousVerticalPosition = null;
            this.previousHorizontalPosition = null;
            this.matchTriggerWidth = false;
            this._isOpen$ = new rxjs.BehaviorSubject(false);
            this.isOpen$ = this._isOpen$.pipe(operators.skip(1));
            this.position$ = new rxjs.BehaviorSubject(EmptyDropdownContentPosition);
            this.calculatePosition = calculatePosition;
            this.calculateInPlacePosition = calculateInPlacePosition;
            this.disabled = false;
            this.beforeOpen = null;
            this.beforeClose = null;
            this.verticalPosition = 'auto';
            this.horizontalPosition = 'auto';
            this.onOpen = this.isOpen$.pipe(operators.filter(function (open) { return open === true; }));
            this.onClose = this.isOpen$.pipe(operators.filter(function (open) { return open === false; }));
            this.uniqueId = null;
            this.width = null;
            this.reposition = function () {
                if (!_this._isOpen$.getValue()) {
                    return null;
                }
                /** @type {?} */
                var dropdownElement = _this.dropdownElement;
                if (!dropdownElement || !_this.triggerElement) {
                    return null;
                }
                /** @type {?} */
                var calculatePosition$$1 = _this.renderInPlace
                    ? _this.calculateInPlacePosition
                    : _this.calculatePosition;
                /** @type {?} */
                var options = {
                    horizontalPosition: _this.horizontalPosition,
                    verticalPosition: _this.verticalPosition,
                    matchTriggerWidth: _this.matchTriggerWidth,
                    previousHorizontalPosition: _this.previousHorizontalPosition,
                    previousVerticalPosition: _this.previousVerticalPosition
                };
                /** @type {?} */
                var positionData = calculatePosition$$1(_this.triggerElement, dropdownElement, options);
                return _this.applyReposition(_this.triggerElement, dropdownElement, positionData);
            };
            this.document = document;
            this.initializeId(id);
            this.createDefaultWormholeOutlet();
        }
        Object.defineProperty(AngularDropdownDirective.prototype, "dropdownId", {
            get: /**
             * @return {?}
             */ function () {
                return "ng-dropdown-content-" + this.uniqueId;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AngularDropdownDirective.prototype, "triggerElement", {
            get: /**
             * @return {?}
             */ function () {
                return ( /** @type {?} */(this.control)).element.nativeElement;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AngularDropdownDirective.prototype, "dropdownElement", {
            get: /**
             * @return {?}
             */ function () {
                return ( /** @type {?} */(this.document.getElementById(this.dropdownId)));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} __0
         * @return {?}
         */
        AngularDropdownDirective.prototype.ngOnChanges = /**
         * @param {?} __0
         * @return {?}
         */
            function (_a) {
                var disabled = _a.disabled;
                if (disabled &&
                    disabled.firstChange === false &&
                    disabled.currentValue === true &&
                    disabled.previousValue !== true) {
                    this.disable();
                }
            };
        /**
         * @return {?}
         */
        AngularDropdownDirective.prototype.open = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.disabled || this._isOpen$.getValue()) {
                    return;
                }
                /** @type {?} */
                var open$ = rxjs.of(true);
                if (this.beforeOpen) {
                    /** @type {?} */
                    var result = this.beforeOpen();
                    open$ = result instanceof rxjs.Observable ? result : rxjs.of(result);
                }
                open$
                    .pipe(operators.first(), operators.filter(function (open) { return open === true; }))
                    .subscribe(function () { return _this._isOpen$.next(true); });
            };
        /**
         * @param {?=} skipFocus
         * @return {?}
         */
        AngularDropdownDirective.prototype.close = /**
         * @param {?=} skipFocus
         * @return {?}
         */
            function (skipFocus) {
                var _this = this;
                if (skipFocus === void 0) {
                    skipFocus = false;
                }
                if (this.disabled || !this._isOpen$.getValue()) {
                    return;
                }
                /** @type {?} */
                var close$ = rxjs.of(true);
                if (this.beforeClose) {
                    /** @type {?} */
                    var result = this.beforeClose();
                    close$ = result instanceof rxjs.Observable ? result : rxjs.of(result);
                }
                close$
                    .pipe(operators.first(), operators.filter(function (close) { return close === true; }))
                    .subscribe(function () {
                    Object.assign(_this, {
                        hPosition: null,
                        vPosition: null,
                        top: null,
                        right: null,
                        bottom: null,
                        left: null,
                        width: null,
                        previousVerticalPosition: null,
                        previousHorizontalPosition: null
                    });
                    _this._isOpen$.next(false);
                    if (!skipFocus) {
                        if (_this.triggerElement instanceof HTMLElement &&
                            _this.triggerElement.tabIndex > -1) {
                            _this.triggerElement.focus();
                        }
                    }
                });
            };
        /**
         * @return {?}
         */
        AngularDropdownDirective.prototype.toggle = /**
         * @return {?}
         */
            function () {
                if (this._isOpen$.getValue()) {
                    this.close();
                }
                else {
                    this.open();
                }
            };
        /**
         * @return {?}
         */
        AngularDropdownDirective.prototype.disable = /**
         * @return {?}
         */
            function () {
                this.disabled = true;
                this.close();
            };
        /**
         * @return {?}
         */
        AngularDropdownDirective.prototype.enable = /**
         * @return {?}
         */
            function () {
                this.disabled = false;
            };
        /**
         * @param {?} trigger
         * @param {?} dropdown
         * @param {?} positions
         * @return {?}
         */
        AngularDropdownDirective.prototype.applyReposition = /**
         * @param {?} trigger
         * @param {?} dropdown
         * @param {?} positions
         * @return {?}
         */
            function (trigger, dropdown, positions) {
                /** @type {?} */
                var changes = {
                    hPosition: positions.horizontalPosition,
                    vPosition: positions.verticalPosition
                };
                if (positions.style) {
                    changes.top = positions.style.top + "px";
                    // The component can be aligned from the right or from the left, but not from both.
                    if (positions.style.left != null) {
                        changes.left = positions.style.left + "px";
                        changes.right = null;
                    }
                    else if (positions.style.right != null) {
                        changes.right = positions.style.right + "px";
                        changes.left = null;
                    }
                    if (positions.style.width != null) {
                        changes.width = positions.style.width + "px";
                    }
                    if (this.position$.getValue().top == null) {
                        // Bypass on the first reposition only to avoid flickering.
                        Object.keys(positions.style).forEach(function (k) { return (dropdown.style[( /** @type {?} */(k))] = positions.style[k]); });
                    }
                }
                this.position$.next(changes);
                this.previousHorizontalPosition = positions.horizontalPosition;
                this.previousVerticalPosition = positions.verticalPosition;
                return changes;
            };
        /**
         * @param {?=} id
         * @return {?}
         */
        AngularDropdownDirective.prototype.initializeId = /**
         * @param {?=} id
         * @return {?}
         */
            function (id) {
                if (id) {
                    this.id = this.uniqueId = id;
                }
                else {
                    this.uniqueId = generateDropdownId();
                    this.id = "ng-dropdown-" + this.uniqueId;
                }
            };
        /**
         * @return {?}
         */
        AngularDropdownDirective.prototype.createDefaultWormholeOutlet = /**
         * @return {?}
         */
            function () {
                if (!this.document.getElementById('ng-dropdown-outlet')) {
                    /** @type {?} */
                    var outlet = this.document.createElement('div');
                    outlet.id = 'ng-dropdown-outlet';
                    this.document.body.insertBefore(outlet, this.document.body.firstChild);
                }
            };
        AngularDropdownDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'ng-dropdown,[ngDropdown],[ng-dropdown]',
                        host: {
                            '[class.render-in-place]': 'renderInPlace',
                            '[class.ng-dropdown]': 'true'
                        }
                    },] }
        ];
        AngularDropdownDirective.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] },
                { type: String, decorators: [{ type: core.Attribute, args: ['id',] }] }
            ];
        };
        AngularDropdownDirective.propDecorators = {
            renderInPlace: [{ type: core.Input }],
            control: [{ type: core.ContentChild, args: [AngularDropdownControlDirective,] }],
            calculatePosition: [{ type: core.Input }],
            calculateInPlacePosition: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            beforeOpen: [{ type: core.Input }],
            beforeClose: [{ type: core.Input }],
            verticalPosition: [{ type: core.Input }],
            horizontalPosition: [{ type: core.Input }],
            onOpen: [{ type: core.Output, args: ['open',] }],
            onClose: [{ type: core.Output, args: ['close',] }],
            dropdownContent: [{ type: core.ContentChild, args: [core.forwardRef(function () { return AngularDropdownContentComponent; }),] }]
        };
        return AngularDropdownDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MutationObserver = (( /** @type {?} */(window))).MutationObserver;
    var AngularDropdownContentComponent = /** @class */ (function () {
        function AngularDropdownContentComponent(dropdown, zone, document) {
            var _this = this;
            this.dropdown = dropdown;
            this.zone = zone;
            this.dropdownClass = '';
            this.overlay = false;
            this.hasMoved = false;
            this._animationClass = null;
            this.isTouchDevice = 'ontouchstart' in window;
            this.mutationObserver = null;
            this.destroy$ = new rxjs.Subject();
            this.transitioningInClass = 'ng-dropdown-content--transitioning-in';
            this.transitionedInClass = 'ng-dropdown-content--transitioned-in';
            this.transitioningOutClass = 'ng-dropdown-content--transitioning-out';
            this.shouldOpen = false;
            this.repositionInZone = function () {
                return _this.zone.run(function () { return _this.dropdown.reposition(); });
            };
            this.handleRootMouseDown = function (e) {
                if (_this.hasMoved ||
                    _this.dropdownElement.contains(( /** @type {?} */(e.target))) ||
                    (_this.triggerElement &&
                        _this.triggerElement.contains(( /** @type {?} */(e.target))))) {
                    _this.hasMoved = false;
                    return;
                }
                /** @type {?} */
                var closestDropdown = closest(( /** @type {?} */(e.target)), 'ng-dropdown-content');
                if (closestDropdown) {
                    /** @type {?} */
                    var trigger = _this.document.querySelector("[aria-controls=" + closestDropdown.getAttribute('id') + "]");
                    /** @type {?} */
                    var parentDropdown = closest(( /** @type {?} */(trigger)), 'ng-dropdown-content');
                    if (parentDropdown &&
                        parentDropdown.getAttribute('id') === _this.dropdown.dropdownId) {
                        _this.hasMoved = false;
                        return;
                    }
                }
                _this.dropdown.close(true);
            };
            this.touchStartHandler = function (e) {
                _this.document.body.addEventListener('touchmove', _this.touchMoveHandler, true);
            };
            this.touchMoveHandler = function (e) {
                _this.hasMoved = true;
                _this.document.body.removeEventListener('touchmove', _this.touchMoveHandler, true);
            };
            this.document = document;
        }
        Object.defineProperty(AngularDropdownContentComponent.prototype, "dropdownElement", {
            get: /**
             * @return {?}
             */ function () {
                return this.dropdown.dropdownElement;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.dropdown.onOpen
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function () { return (_this.shouldOpen = true); });
                this.dropdown.onClose
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function () { return _this.close(); });
            };
        Object.defineProperty(AngularDropdownContentComponent.prototype, "animationClass", {
            get: /**
             * @return {?}
             */ function () {
                return this._animationClass;
            },
            set: /**
             * @param {?} className
             * @return {?}
             */ function (className) {
                if (this._animationClass && className !== this._animationClass) {
                    this.dropdownElement.classList.remove(this._animationClass);
                }
                else if (className) {
                    this.dropdownElement.classList.add(className);
                }
                this._animationClass = className;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AngularDropdownContentComponent.prototype, "triggerElement", {
            get: /**
             * @return {?}
             */ function () {
                return this.dropdown.triggerElement;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.shouldOpen) {
                    this.animationClass = this.transitioningInClass;
                    requestAnimationFrame(function () { return _this.open(); });
                    this.shouldOpen = false;
                }
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy$.next();
                this.teardownEvents();
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.open = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.document.body.addEventListener('mousedown', this.handleRootMouseDown, true);
                if (this.isTouchDevice) {
                    this.document.body.addEventListener('touchstart', this.touchStartHandler, true);
                    this.document.body.addEventListener('touchend', this.handleRootMouseDown, true);
                }
                /** @type {?} */
                var changes = this.dropdown.reposition();
                if (!this.dropdown.renderInPlace) {
                    this.addGlobalEvents();
                    this.startObservingDomMutations();
                }
                else if (changes !== null && changes.vPosition === 'above') {
                    this.startObservingDomMutations();
                }
                requestAnimationFrame(function () { return _this.animateIn(); });
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.close = /**
         * @return {?}
         */
            function () {
                this.teardownEvents();
                this.animateOut();
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.animateIn = /**
         * @return {?}
         */
            function () {
                var _this = this;
                waitForAnimation(this.dropdownElement, function () {
                    _this.animationClass = _this.transitionedInClass;
                });
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.animateOut = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var parentElement = this.dropdown.renderInPlace
                    ? ( /** @type {?} */(this.dropdownElement.parentElement)).parentElement
                    : this.dropdownElement.parentElement;
                /** @type {?} */
                var clone = ( /** @type {?} */(this.dropdownElement.cloneNode(true)));
                clone.id = this.dropdownElement.id + "--clone";
                clone.classList.remove(this.transitionedInClass);
                clone.classList.remove(this.transitioningInClass);
                clone.classList.add(this.transitioningOutClass);
                ( /** @type {?} */(parentElement)).appendChild(clone);
                this.animationClass = this.transitioningInClass;
                waitForAnimation(clone, function () { return ( /** @type {?} */(parentElement)).removeChild(clone); });
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.startObservingDomMutations = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (MutationObserver) {
                    this.mutationObserver = new MutationObserver(function (mutations) {
                        if (mutations[0].addedNodes.length ||
                            mutations[0].removedNodes.length) {
                            _this.repositionInZone();
                        }
                    });
                    ( /** @type {?} */(this.mutationObserver)).observe(this.dropdownElement, {
                        childList: true,
                        subtree: true
                    });
                }
                else {
                    this.dropdownElement.addEventListener('DOMNodeInserted', this.repositionInZone, false);
                    this.dropdownElement.addEventListener('DOMNodeRemoved', this.repositionInZone, false);
                }
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.stopObservingDomMutations = /**
         * @return {?}
         */
            function () {
                if (MutationObserver) {
                    if (this.mutationObserver) {
                        this.mutationObserver.disconnect();
                        this.mutationObserver = null;
                    }
                }
                else {
                    if (this.dropdownElement) {
                        this.dropdownElement.removeEventListener('DOMNodeInserted', this.repositionInZone);
                        this.dropdownElement.removeEventListener('DOMNodeRemoved', this.repositionInZone);
                    }
                }
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.addGlobalEvents = /**
         * @return {?}
         */
            function () {
                window.addEventListener('scroll', this.repositionInZone);
                window.addEventListener('resize', this.repositionInZone);
                window.addEventListener('orientationchange', this.repositionInZone);
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.removeGlobalEvents = /**
         * @return {?}
         */
            function () {
                window.removeEventListener('scroll', this.repositionInZone);
                window.removeEventListener('resize', this.repositionInZone);
                window.removeEventListener('orientationchange', this.repositionInZone);
            };
        /**
         * @return {?}
         */
        AngularDropdownContentComponent.prototype.teardownEvents = /**
         * @return {?}
         */
            function () {
                this.removeGlobalEvents();
                this.stopObservingDomMutations();
                this.document.body.removeEventListener('mousedown', this.handleRootMouseDown, true);
                if (this.isTouchDevice) {
                    this.document.body.removeEventListener('touchstart', this.touchStartHandler, true);
                    this.document.body.removeEventListener('touchend', this.handleRootMouseDown, true);
                }
            };
        AngularDropdownContentComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ng-dropdown-content,[ng-dropdown-content],[ngDropdownContent]',
                        template: "<ng-container *ngIf=\"dropdown.isOpen$ | async as isOpen\">\n  <ng-container *ngWormhole=\"'#ng-dropdown-outlet'; renderInPlace: dropdown.renderInPlace\">\n    <div *ngIf=\"overlay && isOpen\" class=\"ng-dropdown-overlay\"></div>\n    <div [id]=\"dropdown.dropdownId\"\n        class=\"ng-dropdown-content {{dropdownClass}}\"\n        [style.top]=\"(dropdown.position$ | async).top\"\n        [style.right]=\"(dropdown.position$ | async).right\"\n        [style.bottom]=\"(dropdown.position$ | async).bottom\"\n        [style.left]=\"(dropdown.position$ | async).left\"\n        [class.render-in-place]=\"dropdown.renderInPlace\"\n        [class.ng-dropdown-content--above]=\"(dropdown.position$ | async).vPosition === 'above'\"\n        [class.ng-dropdown-content--below]=\"(dropdown.position$ | async).vPosition === 'below'\"\n        [class.ng-dropdown-content--right]=\"(dropdown.position$ | async).hPosition === 'right'\"\n        [class.ng-dropdown-content--center]=\"(dropdown.position$ | async).hPosition === 'center'\"\n        [class.ng-dropdown-content--left]=\"(dropdown.position$ | async).hPosition === 'left'\">\n      <ng-content></ng-content>\n    </div>\n  </ng-container>\n  <div *ngIf=\"!isOpen\" [id]=\"dropdown.dropdownId\" class=\"ng-dropdown-placeholder\"></div>\n</ng-container>\n",
                        host: {
                            '[class.render-in-place]': 'dropdown.renderInPlace'
                        },
                        styles: [":host{display:none}:host.render-in-place{display:block;position:absolute}"]
                    }] }
        ];
        AngularDropdownContentComponent.ctorParameters = function () {
            return [
                { type: AngularDropdownDirective, decorators: [{ type: core.Host }, { type: core.Inject, args: [core.forwardRef(function () { return AngularDropdownDirective; }),] }] },
                { type: core.NgZone },
                { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
            ];
        };
        AngularDropdownContentComponent.propDecorators = {
            dropdownClass: [{ type: core.Input }],
            overlay: [{ type: core.Input }],
            transitioningInClass: [{ type: core.Input }],
            transitionedInClass: [{ type: core.Input }],
            transitioningOutClass: [{ type: core.Input }]
        };
        return AngularDropdownContentComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AngularDropdownModule = /** @class */ (function () {
        function AngularDropdownModule() {
        }
        AngularDropdownModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, ngWormhole.NgWormholeModule],
                        declarations: [
                            AngularDropdownDirective,
                            AngularDropdownControlDirective,
                            AngularDropdownContentComponent
                        ],
                        exports: [
                            AngularDropdownDirective,
                            AngularDropdownControlDirective,
                            AngularDropdownContentComponent
                        ]
                    },] }
        ];
        return AngularDropdownModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.AngularDropdownContentComponent = AngularDropdownContentComponent;
    exports.AngularDropdownControlDirective = AngularDropdownControlDirective;
    exports.AngularDropdownDirective = AngularDropdownDirective;
    exports.AngularDropdownModule = AngularDropdownModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,